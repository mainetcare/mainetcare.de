<?php

namespace Tests\Unit;

use App\Exceptions\BookingException;
use App\Factories\AngebotFactory;
use App\Factories\AppartementFactory;
use App\Factories\PferdepensionFactory;
use App\Models\Angebot;
use App\Models\Appartement;
use App\Models\Fitness;
use App\Models\Pferdepension;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\CreatesModels;
use Tests\TestCase;
use Tests\DBSwitcher;

class AngebotTest extends TestCase {

    use DBSwitcher, CreatesModels, DatabaseMigrations, InteractsWithDatabase;

    /**
     * @var Angebot|null
     */
    public $model = null;

    public function createAngebotSauna() {
        return app( AngebotFactory::class )->initBySlug( 'gym-und-sauna' );
    }


    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->model = $this->createAngebotSauna();
    }

    /**
     * @test
     */
    public function an_angebot_has_an_angebotsbereich() {
        $this->assertEquals( 'erlebniswelt-fitness-und-sauna', $this->model->getBereich() );
    }

    /**
     * @test
     */
    public function an_angebot_has_an_angebotsgruppe() {
        $this->assertEquals( 'sauna', $this->model->getGruppe()->first() );
    }

    /**
     * @test
     */
    public function it_has_category() {
        $this->assertEquals( 'erlebniswelt-fitness-und-sauna', $this->model->cart_category );
    }



    /**
     * @test
     */
    public function it_can_get_staffelpreise_by_unit() {

        $unit = 'tag';

        $this->model = $this->createTestangebot();

        $this->assertEquals( 15, $this->model->getPricesByUnit( $unit )->first()->get( 'preis' ) );
        $this->assertEquals( 12, $this->model->getPricesByUnit( $unit )->where( 'ab_me', 7 )->first()->get( 'preis' ) );

        $unit = 'paket';
        $this->assertEquals( 100, $this->model->getPricesByUnit( $unit )->first()->get( 'preis' ) );
        $this->assertEquals( 75, $this->model->getPricesByUnit( $unit )->where( 'ab_me', 10 )->first()->get( 'preis' ) );

    }


}
