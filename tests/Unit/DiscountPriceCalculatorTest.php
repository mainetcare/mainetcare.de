<?php

namespace Tests\Unit;

use App\Factories\AngebotFactory;
use App\Models\Angebot;
use App\Models\Rabatt;
use App\Repositories\AppartementRepository;
use App\Services\AngebotPriceCalculator;
use App\Services\AppartementPriceCalculator;
use App\Services\BulkPrices;
use App\Services\DiscountCalculator;
use App\Services\PaketPriceCalculator;
use Tests\CreatesModels;
use Tests\SetUpRabatt;
use Tests\TestCase;

class DiscountPriceCalculatorTest extends TestCase {


    use SetUpRabatt, CreatesModels;

    /**
     * @var null | Rabatt
     */
    protected $rabatt = null;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->rabatt = $this->createTestRabatt();
    }

    public function tearDown(): void {
        parent::tearDown();
    }

    /**
     * @test
     */
    public function it_can_calculate_the_discount_price_for_appartement() {

        $appartement         = app( AppartementRepository::class )->getByPreisklasse( 'klasse-test' )->first();
        $calculator          = app( AppartementPriceCalculator::class )->input( $appartement, 1, true );
        $discount_calculator = new DiscountCalculator( $calculator, $this->rabatt );
        $this->assertEquals( 170, $discount_calculator->getTotal() );

    }

    /**
     * @test
     */
    public function it_can_calculate_the_discount_price_for_paket() {

        $paket               = $this->createTestpaket();
        $calculator          = app( PaketPriceCalculator::class )->input( $paket, 'klasse-1', 1, 1, true );
        $discount_calculator = new DiscountCalculator( $calculator, $this->rabatt );
        $this->assertEquals( 595, $discount_calculator->getTotal() );

    }


    /**
     * @test
     * @dataProvider calcAngebot
     *
     * @param string $unit
     * @param $amount
     * @param $multiplier
     * @param $expected
     */
    public function it_can_calculate_the_discount_price_for_angebot( string $unit, int $amount, int $multiplier, float $expected ) {

        $angebot             = $this->createTestangebot();
        $bulkprices          = new BulkPrices( $angebot, $unit );
        $calculator          = new AngebotPriceCalculator( $bulkprices, $amount, $multiplier );
        $discount_calculator = new DiscountCalculator( $calculator, $this->rabatt );
        $this->assertEquals( $expected, $discount_calculator->getTotal() );

    }

    /**
     * @return array[]
     */
    public function calcAngebot() {
        return [
            [ Angebot::ME_TAGE, 1, 1, 12.75 ],
            [ Angebot::ME_PAKET, 1, 1, 85 ],
        ];
    }


}
