<?php

namespace Tests\Unit;

use App\Factories\RabattFactory;
use Illuminate\Support\Carbon;
use Tests\CreatesModels;
use Tests\SetUpRabatt;
use Tests\TestCase;

class RabattTest extends TestCase {

    use CreatesModels, SetUpRabatt;

    protected $start = '';
    protected $end = '';
    protected $rabatt = null;

    public function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setUpRabatt();
        $this->setRabattActive($this->createTestRabatt());
    }

    public function tearDown(): void {
        // order is important:
        $this->setRabattInactive($this->createTestRabatt());
        $this->tearDownRabatt();
        parent::tearDown();
    }

    /**
     * @test
     */
    public function it_can_be_displayed_as_teaser() {
        $rabatt = $this->createTestRabatt();
        $this->assertTrue($rabatt->showTeaser());
    }

    /**
     * @test
     */
    public function a_rabatt_is_active_if_today_lies_in_the_rabattzeitraum_and_it_is_published() {

        $start = Carbon::yesterday();
        $end   = Carbon::tomorrow();

        $rabatt = $this->createTestRabatt();

        // set today in aktionszeitraum, should be true:
        $rabatt->entry->publish();
        $rabatt->entry->set( 'aktion_start', $start->toDateString() );
        $rabatt->entry->set( 'aktion_end', $end->toDateString() );

        $this->assertTrue( $rabatt->isActive() );

        // Unpublish should be false
        $rabatt->entry->unpublish();
        $this->assertFalse( $rabatt->isActive() );

        // set today Not in aktionszeitraum, should be false:
        $rabatt->entry->publish();
        $rabatt->entry->set( 'aktion_start', $start->addYear()->toDateString() );
        $rabatt->entry->set( 'aktion_end', $end->addYear()->toDateString() );

        $this->assertFalse( $rabatt->isActive() );

    }


    /**
     * @test
     */
    public function it_can_affect_only_certain_appartements() {
        $rabatt = $this->createTestRabatt_B();
        $this->setRabattActive($rabatt);

        $app_1 = $this->createTestappartement(); // In List
        $app_2 = $this->createAppartementMeteor(); // Not in List

        $this->assertTrue($rabatt->effects($app_1));
        $this->assertFalse($rabatt->effects($app_2));
    }


}
